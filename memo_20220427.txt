
// codesandboxで動作確認のこと

type asyncUnknownFunc<T> = (...args: any[]) => Promise<T>;
type unknownFunc<T> = (arg: T) => boolean;
interface subtitle_piece {
  subtitle: string;
};
const INTERVAL_TIME: number = 1000;

const repeatPromise = async function<T>(
  // インターバル間隔
  interval: number,
  // setIntervalへ渡すコールバック関数
  callback: asyncUnknownFunc<T>,
  // callbackの戻り値を判定する関数
  condition: unknownFunc<T>,
  // 何回繰り返すのか
  upTo: number
): Promise<T> {
  return new Promise((resolve, reject) => {
    let intervalId: number;
    let counter: number = 0;

  intervalId = setInterval(async function() {
    console.log(`Count: ${counter}`);
    if(counter >= upTo) {
      console.log("It's over")
      clearInterval(intervalId);
      reject(
        // reject時に返す値も予め用意できない
      );
    }
    const result: T = await callback();
    if(condition(result)){
      console.log("Solved!");
      clearInterval(intervalId);
      resolve(result);
    }
    else counter++;
  }, interval)
  })
}

const callback_ = async (): Promise<subtitle_piece[]> => {
  // returns promise
  return [
    {subtitle: "this is subtitle"},
    {subtitle: "this is subtitle"},
    {subtitle: "this is subtitle"},
    {subtitle: "this is subtitle"},
    {subtitle: "this is subtitle"},
    {subtitle: "this is subtitle"},
  ];
}

const condition_ = (operand: subtitle_piece[]): boolean => {
  // condition check
  // return result as boolean;
  return Math.floor(Math.random()*9) ? true : false;
}




(async function() {
  // TODO: あとは以下を返す関数をつくるだけ
  try {
    const repeatCaptureSubtitles = repeatPromise<subtitle_piece[]>(
      INTERVAL_TIME, callback_, condition_, 10
    );
  }
  catch(e){
    console.error(e);
  }
  
})();