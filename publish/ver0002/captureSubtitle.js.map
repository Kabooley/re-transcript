{"version":3,"file":"captureSubtitle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://playground-chromeextension/./src/utils/constants.ts","webpack://playground-chromeextension/./src/utils/selectors.ts","webpack://playground-chromeextension/webpack/bootstrap","webpack://playground-chromeextension/webpack/runtime/define property getters","webpack://playground-chromeextension/webpack/runtime/hasOwnProperty shorthand","webpack://playground-chromeextension/webpack/runtime/make namespace object","webpack://playground-chromeextension/./src/contentScript/captureSubtitle.ts"],"sourcesContent":["// Valid URL pattern.\r\nexport const urlPattern = /https:\\/\\/www.udemy.com\\/course\\/*/gm;\r\n//\r\n// --- RELATED TO MESSAGE PASSING -------------\r\n//\r\n// message passingで利用する拡張機能名称\r\nexport const extensionNames = {\r\n    popup: 'popup',\r\n    contentScript: 'contentScript',\r\n    controller: 'controller',\r\n    captureSubtitle: 'captureSubtitle',\r\n    background: 'background',\r\n};\r\n// message passingで利用する共通order名称\r\nexport const orderNames = {\r\n    // From background to contentScript\r\n    sendStatus: 'sendStatus',\r\n    // from controller to background\r\n    sendSubtitles: 'sendSubtitles',\r\n    // from popup, run process\r\n    run: 'run',\r\n    // reset content script\r\n    reset: 'reset',\r\n    // Turn Off ExTranscript\r\n    turnOff: 'turnOff',\r\n    // something succeeded\r\n    success: 'success',\r\n    // Is the page moved to text page?\r\n    isPageIncludingMovie: 'isPageIncludingMovie',\r\n    // Alert\r\n    alert: 'alert',\r\n};\r\n// --- RELATED TO background.ts --------------\r\n// Key for chrome.storage.local in background.ts\r\nexport const _key_of_model_state__ = '_key_of_model_state__@&%8=8';\r\nexport const _key_of_localstorage__ = '__key__of_local_storage__@&%8=8';\r\nexport const copies = {};\r\n// TODO: まだlocalStorageにこの情報が残っているかも...\r\n// const _key_of_localstorage__ = \"__key__of_local_storage__\";\r\n// --- RELATED TO controller.ts -----------------\r\n// transcript要素はwinodwサイズが975px以下の時にdashboardへ以上でsidebarへ移動する\r\n// export const RESIZE_BOUNDARY: number = 975;\r\nexport const RESIZE_BOUNDARY = 963;\r\n// window onResize時の反応遅延速度\r\nexport const RESIZE_TIMER = 100;\r\nexport const positionStatus = {\r\n    sidebar: 'sidebar',\r\n    noSidebar: 'noSidebar',\r\n};\r\n// Template message for alert.\r\n// export const messageTemplate = {\r\n//     appCannotExecute:\r\n//         'Problem occured that the extension not being able to run. Please turn off the extension or reload the page.',\r\n//     letPagePrepare:\r\n//         'Please turn on Transcript and choose English for subtitle language.',\r\n// };\r\nexport const messageTemplate = {\r\n    appCannotExecute: '[re-transcript] 拡張機能が実行不可能なエラーが起こりました。お手数ですが拡張機能をOFFにして展開中のページをリロードしてください。',\r\n    letPagePrepare: '[re-transcript] トランスクリプトと字幕表示をONにして、字幕言語を英語にしてから再度実行してください。',\r\n};\r\n","/***************************************************\r\n * SELECTORS\r\n *\r\n * Including:\r\n * - Udemy elements selectors.\r\n * - re-transcript generated elements selectors.\r\n *\r\n * **************************************************/\r\n// --- Selectors related to Transcript ---------------------------\r\n// Udemy講義ページが動画ページならこのセレクタが一致する\r\n// テキストページとかなら一致しない\r\nexport const videoContainer = 'div.video-viewer--container--23VX7';\r\n// new added. UdemyページのNavbarヘッダ\r\nexport const header = '.header--header--3k4a7';\r\nexport const transcript = {\r\n    // HTMLSpanElement which is Highlight as current subtitle on movie.\r\n    highlight: 'span.transcript--highlight-cue--1bEgq',\r\n    // NodeListOf<HTMLSpanElement> which are list of subtitle element.\r\n    transcripts: 'div.transcript--cue-container--wu3UY p.transcript--underline-cue--3osdw span',\r\n    // top element of side bar\r\n    noSidebar: 'div.app--no-sidebar--1naXE',\r\n    sidebar: 'div.has-sidebar',\r\n    // High level element of Movie element\r\n    movieContainer: 'div.app--curriculum-item--2GBGE',\r\n    // Movie Replay button\r\n    replayButton: \"button[data-purpose='video-play-button-initial']\",\r\n    // Controlbar\r\n    controlbar: \"div.control-bar--control-bar--MweER[data-purpose='video-controls']\",\r\n    // Footer of Transcript when it is sidebar.\r\n    footerOfSidebar: '.transcript--autoscroll-wrapper--oS-dz',\r\n    // new added. 自動スクロールチェックボックス\r\n    // AutoScroll Checkbox\r\n    autoscroll: \"[name='autoscroll-checkbox']\",\r\n};\r\n// --- Selectors related to control bar. -------------------------\r\nexport const controlBar = {\r\n    // \"closed captioning\"\r\n    cc: {\r\n        // 字幕メニューpopupボタン\r\n        popupButton: \"button[data-purpose='captions-dropdown-button']\",\r\n        // textContentで取得できる言語を取得可能\r\n        //   languageList:\r\n        //     \"button.udlite-btn.udlite-btn-large.udlite-btn-ghost.udlite-text-sm.udlite-block-list-item.udlite-block-list-item-small.udlite-block-list-item-neutral > div.udlite-block-list-item-content\",\r\n        //\r\n        // 言語リストを取得するには一旦languageButtonsを取得してからそれからquerySelectorする\r\n        // いらないかも\r\n        menuCheckButtons: 'button',\r\n        menuList: '.udlite-block-list-item-content',\r\n        menuListParent: \"ul[role='menu'][data-purpose='captions-dropdown-menu']\",\r\n        // 上記のセレクタのラッパーボタン。\r\n        // 属性`aria-checked`で選択されているかどうかわかる\r\n        checkButtons: 'button.udlite-btn.udlite-btn-large.udlite-btn-ghost.udlite-text-sm.udlite-block-list-item.udlite-block-list-item-small.udlite-block-list-item-neutral',\r\n    },\r\n    transcript: {\r\n        toggleButton: \"button[data-purpose='transcript-toggle']\",\r\n    },\r\n    theatre: {\r\n        theatreToggle: \"button[data-purpose='theatre-mode-toggle-button']\",\r\n    },\r\n};\r\n// --- Selectors related ex-transcript -----------------------\r\nexport const EX = {\r\n    // Udemy page-specific selector\r\n    sidebarParent: '.app--content-column--HC_i1',\r\n    noSidebarParent: '.app--dashboard-content--r2Ce9',\r\n    movieContainer: '.app--body-container',\r\n    // 独自selector `ex--`を接頭辞とする\r\n    // sidebar ex-transcript selectors\r\n    sidebarWrapper: '.ex-sidebar__column',\r\n    sidebarSection: '.ex-sidebar__sidebar',\r\n    sidebarHeader: '.ex-sidebar__header',\r\n    sidebarContent: '.ex-sidebar__content',\r\n    sidebarContentPanel: '.ex-transcript__panel',\r\n    sidebarCueContainer: '.ex-transcript__cue-container',\r\n    // recently added. '.ex-transcript__cue-container'の子要素のparagraphのclass名\r\n    sidebarCue: '.ex-transcript__cue',\r\n    // recently added. .ex-transcript__cue'の子要素のspan要素のdata-purposeの指定値\r\n    sidebarCueSpan: 'ex-transcript__cue--text',\r\n    sidebarFooter: '.ex-sidebar__footer',\r\n    // sidebar width in case more than SIDEBAR_WIDTH_BOUNDARY\r\n    wideView: '.ex--sidebar--wideview',\r\n    // sidebar width in case less than SIDEBAR_WIDTH_BOUNDARY\r\n    middleView: '.ex--sidebar--middleview',\r\n    // bottom ex-transcript selectors\r\n    dashboardTranscriptWrapper: '.ex-dashboard-transcript__wrapper',\r\n    dashboardTranscriptHeader: '.ex-dashboard-transcript__header',\r\n    dashboardTranscriptPanel: '.ex-dashboard-transcript__transcript--panel',\r\n    dashboardTranscriptCueContainer: '.ex-dashboard-transcript__transcript--cue-container',\r\n    dashboardTranscriptCue: '.ex-dashboard-transcript__transcript--cue',\r\n    // data-purpose\r\n    dashboardTranscriptCueText: 'ex--dashboard-cue-text',\r\n    dashboardTranscriptBottom: '.ex-dashboard-transcript__footer',\r\n    // To Highlight Transcriot Cue Container\r\n    highlight: '.--highlight',\r\n    closeButton: '.btn__close',\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*********************************************************\r\n * Capture Subtitles\r\n *\r\n * Features:\r\n * 1. Retrieve subtitle data and retouch it at every request.\r\n * 2. Send retouched data to background script.\r\n *\r\n * Prerequisities:\r\n * The web page this script will be injected must has been DOM loaded already.\r\n *\r\n * This content script will be injected dynamically.\r\n * Exception error will be sent to background script.\r\n *\r\n * ********************************************************/\r\nimport * as selectors from '../utils/selectors';\r\nimport { orderNames, extensionNames, } from '../utils/constants';\r\n// --- chrome API Listener --------------------------------\r\n/**\r\n * Accept `sendStatus` order.\r\n * */\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n    const { from, to, order } = message;\r\n    if (to !== extensionNames.captureSubtitle)\r\n        return;\r\n    const r = {\r\n        from: extensionNames.captureSubtitle,\r\n        to: from,\r\n    };\r\n    if (order && order.length) {\r\n        if (order.includes(orderNames.sendSubtitles)) {\r\n            try {\r\n                const chunks = mainProcess();\r\n                r.subtitles = chunks;\r\n                r.complete = true;\r\n            }\r\n            catch (e) {\r\n                r.complete = false;\r\n                r.error = e;\r\n            }\r\n            finally {\r\n                sendResponse(r);\r\n            }\r\n        }\r\n    }\r\n});\r\n// -- Capture Methods -----------------------------------\r\n/**********************************************\r\n * @return {subtitle_piece[]}\r\n * @throws {SyntaxError} - In case document.querySelectorAll fails to get DOM.\r\n *\r\n * */\r\nconst capturingSubtitle = () => {\r\n    try {\r\n        const spans = document.querySelectorAll(selectors.transcript.transcripts);\r\n        const subtitles = Array.from(spans).map((span, index) => {\r\n            return { index: index, subtitle: span.innerText.trim() };\r\n        });\r\n        return subtitles;\r\n    }\r\n    catch (e) {\r\n        // Array.from(null)でSyntaxError. spansがnullだった可能性有\r\n        throw e;\r\n    }\r\n};\r\n/***\r\n * subtitle pieces to chunks\r\n *\r\n * @param {subtitle_piece[]} subtitles - Subtitle data just retrieved and not yet retouched.\r\n * @return {subtitle_piece[]} - Retouched subtitle data.\r\n *\r\n * Variables name:\r\n * - piece: An element in argument.\r\n * - block: Retouched element.\r\n *\r\n * Retouch process:\r\n *\r\n * ```\r\n *  const blocks = subtitles.map();\r\n * ```\r\n * 1. Keep push piece of subtitle into buff until its subtitle has period or question charactor at end of sentence.\r\n * 2. If subtitle has period or question charactor, then make buff turn to element of block.\r\n * 3. Then clear buff and go next.\r\n *\r\n * */\r\nconst subtitlesPiecesToBlocks = function (subtitles) {\r\n    var buff = [];\r\n    var index = null;\r\n    const blocks = subtitles.map((subtitle) => {\r\n        // Give index if buff is emptry to keep the block has same index at each element.\r\n        if (buff.length === 0) {\r\n            index = subtitle.index;\r\n        }\r\n        // If sentence is period or question, then return buff and index as object.\r\n        // TODO: substr() is DEPRECATED.\r\n        const s = subtitle.subtitle.trim().substr(-1, 1);\r\n        if (s === '.' || s === '?') {\r\n            const piece = {\r\n                index: index,\r\n                subtitle: [...buff, subtitle.subtitle].join(' '),\r\n            };\r\n            // Reset for next loop.\r\n            buff = [];\r\n            index = null;\r\n            return piece;\r\n        }\r\n        else {\r\n            // Keep pushing subtitle piece into buff until it has period or question charactor at end of sentence.\r\n            buff.push(subtitle.subtitle);\r\n        }\r\n    });\r\n    // Removing undefined element.\r\n    return blocks.filter((block) => block !== undefined);\r\n};\r\n/**\r\n *  Main Process\r\n *\r\n * */\r\nconst mainProcess = () => {\r\n    const subtitlePieces = capturingSubtitle();\r\n    const chunks = subtitlesPiecesToBlocks(subtitlePieces);\r\n    return chunks;\r\n};\r\n"],"names":[],"sourceRoot":""}